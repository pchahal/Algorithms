//------------------------------------------------------------------------------
// <auto-generated>
//So now that the client code has taken over the specification of the algorithm,
//you don’t inherit a template method anymore and then customize that
//	method to create your own robots. Instead, to create different types of
//		robots, you allow client code to use different builder objects.
//		That’s the idea: the client code now sets the sequence and number of the
//		steps in the algorithm, and selects which builders to use to create the robot
//		it wants.
//		After the sequence
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
namespace Patterns
{
	public interface RobotBuildable
	{
		void Go();
	}
	public interface RobotBuilder
	{
		void addStart();
		void addGetParts();
		void addAssemble();
		void addTest();
		void addStop();
		RobotBuildable getRobot();
	}

	public class CookieRobotBuilder:RobotBuilder
	{		
		CookieRobotBuildable robot;
		List<int> actions;

		public CookieRobotBuilder()
		{
			actions = new List<int> ();
			robot = new CookieRobotBuildable ();
		}
		public void addStart (){actions.Add (1);}
		public void addGetParts (){actions.Add (2);}
		public void addAssemble (){actions.Add (3);}
		public void addTest (){actions.Add (4);}
		public void addStop (){actions.Add (5);}
		public RobotBuildable getRobot ()
		{
			robot.LoadActions(actions);
			return robot;
		}
	}


	public class CookieRobotBuildable:RobotBuildable
	{
		List<int> actions;
		public CookieRobotBuildable(){		}

		public void Go ()
		{
			foreach (var a in actions) {
				switch (a) {
				case 1: Start();break;
				case 2: GetParts();break;
				case 3: Assemble();break;
				case 4: Test();break;
				case 5: Stop();break;							
				}				
			}
		}

		public void Start (){Console.WriteLine ("Starting...");}
		public void GetParts (){Console.WriteLine ("Getting Parts...");}
		public void Assemble (){Console.WriteLine ("Assembling...");}
		public void Test (){Console.WriteLine ("Testing...");}
		public void Stop (){Console.WriteLine ("Stopping...");}

		public void LoadActions(List<int> actionList)
		{
			actions = actionList;
		}
	}
}


//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using NUnit.Framework;
using System;
using Patterns;
using System.Collections;
using GameProgrammingPatterns;


namespace test
{
    [TestFixture()]
    public class GameProgrammingTests
    {
        [Test()]
        public void ComponentTest()
        {
            GameObject go= new GameObject(new PlayerInputComponent(),
                                 new BjornPhysicsComponent(),
                                 new BjornGraphicsComponent());

            go.Update(new World(),new Graphics());

        }

        [Test()]
        public void CommandTest()
        {
            GameObject go = new GameObject(new PlayerInputComponent(),
                                  new BjornPhysicsComponent(),
                                  new BjornGraphicsComponent());

            InputHandler inputHandler = new InputHandler();
            GameProgrammingPatterns.ICommand command = inputHandler.handleInput();
            if (command!=null)
            {
                command.execute(go);
            }
        }

        [Test()]
        public void PrototypeTest()
        {
            Monster ghostPrototype = new Ghost(15, 3);
            Spawner ghostSpawner = new Spawner(ghostPrototype);

        }

        [Test()]
        public void StateTest()
        {
        }

        [Test()]
        public void ServiceLocatorTest()
        {
            ConsoleAudio consoleAudio= new ConsoleAudio();
            Locator.provide(consoleAudio);
            //to get audio anywhere in app do
            Locator.getAudio().playSound(1);
        }

        [Test()]
        public void ByteCodeTest()
        {
            byte b = 0x05;
            byte[] byteCodes = new byte[] { 0x05, 0x00, 0x05, 0xA, 0x00 };
            VM vm= new VM();
            vm.interpret(byteCodes,5);
            Assert.AreEqual("sethealth100",vm.result);//set wizard 0 health to 10

        }
    }
}

